(ContextValidator Trigger) = { Members = {
	(A Y) = { Left = "start_date" Right = Date }

} }

(ContextValidator Command) = { Members = {
	(N Y) = { Left = "custom_tooltip" Right = Key }
	
	#(If If = Eu3Ht) = {
	#	(N Y) = { Left = "possible_province_event" Right = { ProvinceEventId ThisProvince } }
	#	(N Y) = { Left = "possible_country_event " Right = { CountryEventId ThisCountry } }
	#	(Y Y) = { Left = "refresh_events" Right = Bool }
	#}
} }

(ContextValidator ProvinceCommand) = { Members = {
	(N N) = { Left = "province_event" Right = {
		Inherits = EventCallBase
		Single = { Left = "id" Right = ProvinceEventId }
	} }
	
	(N N) = { Left = "random" Right = RandomProvinceCommand }
	(N N) = { Left = "random_list" Right = RandomProvinceList }
} }

(ContextValidator CountryCommand) = { Members = {
	(N N) = { Left = "country_event" Right = {
		Inherits = EventCallBase
		Single = { Left = "id" Right = CountryEventId }
	} }

	(N Y) = { Left = "random" Right = RandomCountryCommand }
	(N Y) = { Left = "random_list" Right = RandomCountryList }
	
	# As pointed out by Helius 197
	# Valid from IN on
	# http://forum.paradoxplaza.com/forum/showthread.php?t=358508
	# AI event commands
	#(Y  ) = { Left = "fixed_ai_strategy" Right = Bool }
	#(N Y) = { Left = "add_ai_strategy" Right = StrategyClause }
} }





(Type RandomCountryCommand) = {
	Inherits = CountryCommand
	Single = { Left = "chance" Right = Int }
}

(Type RandomCountryList) = {
	(Ch N N) = { Left = { Type = Int } Right = CountryCommand }
}

(Type RandomProvinceCommand) = {
	Inherits = ProvinceCommand
	Single = { Left = "chance" Right = Int }
}

(Type RandomProvinceList) = {
	(Ch N N) = { Left = { Type = Int } Right = ProvinceCommand }
}

(Type EventCallBase) = {
	Optional = { Left = "days" Right = NnInt }
	#Optional = { Left = "months" Right = NnInt }
	#Optional = { Left = "years" Right = NnInt }
	AtMostOne = { days years months }
	Optional = { Left = "tooltip" Right = Key }
	Optional = { Left = "random" Right = NonNegPercent }
}
